@using MudBlazor
@using BmeModels
@using BmeBlazorServer.Services
@using BmeBlazorServer.Repositories
@using System.ComponentModel.DataAnnotations
@inject ICategoryRepository CategoryRepository
@inject ITransactionRepository TransactionRepository
@inject ISnackbar Snackbar

<EditForm Model="transaction" >
<DataAnnotationsValidator/>
<MudDialog Class="rounded-xl">
    <DialogContent>
        <MudText Typo="Typo.h4" Class="mx-3 mb-6 mt-4" Color="Color.Primary">Edit transaction</MudText>
        <MudTextField 
            @bind-Value="transaction.Source"
            For="@(() => transaction.Source)"
            Label="Debitor/Source" 
            HelperText="E.g: Microsoft"  
            Class="pa-3" 
            Variant="@incomeFieldVariant"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Business"/>


        <MudAutocomplete 
            @bind-Value="transaction.Type"
            T="string" 
            Label="Type"
            Class="pa-3"
            Clearable="true"
            Variant="@incomeFieldVariant"
            MaxItems="2"
            SearchFunc="@TypeSearch"
            ResetValueOnEmptyText="true" >
        </MudAutocomplete>

        <MudTextField 
            @bind-Value="transaction.Value"
            For="@(() => transaction.Value)"
            Label="Value" 
            HelperText="E.g: 4000" 
            Class="pa-3" 
            InputType="InputType.Number"
            Variant="@incomeFieldVariant" 
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.AttachMoney" />

        <MudDatePicker 
            @bind-Date="date"
            Label="Date"
            Class="pa-3"
            ShowWeekNumbers="true"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End"
            Variant="@incomeFieldVariant">
        </MudDatePicker>
                   
        <MudAutocomplete 
            @bind-Value="transaction.Category.Title"
            T="string" 
            Label="Category"
            Class="pa-3"
            Clearable="true"
            Variant="@incomeFieldVariant"
            MaxItems="15"
            SearchFunc="@Search1"
            ResetValueOnEmptyText="true" >
        </MudAutocomplete>
                        
        <MudAutocomplete 
            @bind-Value="subcategory" 
            T="string" 
            Label="Subcategory"
            Class="pa-3"
            Clearable="true"
            Variant="@incomeFieldVariant"
            MaxItems="15"
            SearchFunc="@Search2"
            ResetValueOnEmptyText="true" >
        </MudAutocomplete>

        <MudTextField 
            @bind-Value="transaction.Description"
            For="@(() => transaction.Description)"
            Label="Description" 
            HelperText="E.g: Sold my car"  
            Class="pa-3" 
            Variant="@incomeFieldVariant"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.TextSnippet" >
        </MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Class="mx-auto mb-4" OnClick="Cancel">Cancel</MudButton>
        <MudButton Class="mx-auto mb-4" 
            Color="Color.Error" 
            Variant="Variant.Filled"
            OnClick="OnDelete"
        >Delete</MudButton>
        <MudButton Class="mx-auto mb-4" 
            Color="Color.Primary" 
            Variant="Variant.Filled"
            OnClick="OnEdit"
        >Edit</MudButton>
    </DialogActions>
</MudDialog>
</EditForm>               

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();
    [Parameter] public Transaction transaction { get; set; } = new Transaction();
    [Parameter] public DateTime? date { get; set; } = new DateTime();
    [Parameter] public string category { get; set; } = string.Empty;
    [Parameter] public string subcategory { get; set; } = string.Empty;

    void Cancel() => MudDialog.Cancel();
    private Variant incomeFieldVariant = Variant.Filled;
    private List<Category> Categories = new();
    private List<Subcategory> SubCategories = new();
    private List<string> categories = new();
    private List<string> subCategories = new();
    private List<string> types = new() { "Income", "Expense" };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // fetch categories from API
        if (!Categories.Any())
        {
            Categories = await CategoryRepository.GetCategories();
            foreach(Category c in Categories)
            {   
                // Only take income part of categories
                if(c.Id<=14)
                    categories.Add(c.Title);
            }
        }

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return categories;
        }
        return categories.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // fetch subCategories from API
        if (!SubCategories.Any())
        {
            SubCategories = await CategoryRepository.GetSubCategories();
        }
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return subCategories;
        return subCategories.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task<IEnumerable<string>> TypeSearch(string value)
    {
        await Task.Delay(1);
        if (string.IsNullOrEmpty(value))
            return types;
        return types.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnEdit()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.VisibleStateDuration = 3000;
        bool inputOk = await ValidateInput();
        if (inputOk)
        {
            //Console.WriteLine(transaction.ToString());
            var response = await TransactionRepository.UpdateTransaction(transaction);
            if (response.Status)
            {
                Snackbar.Add("Income edit successful!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }

        }
        else
        {
            Snackbar.Add("Error! Changes were not saved.", Severity.Error);
            return;
        }
    }

    private async Task OnDelete()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.VisibleStateDuration = 3000;
        ResponseModel response = new();
        //bool validated = await ValidateInput();
        //if (validated)
        //{
        response = await TransactionRepository.DeleteTransaction(transaction);
        if (response.Status)
        {
            Snackbar.Add("Delete successful!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Error! Changes were not saved: "+ response.Message, Severity.Error);
        }
        //}
    }

    private async Task<bool> ValidateInput()
    {
        if (!date.HasValue || date.Value >= DateTime.Now)
        {
            Snackbar.Add("Incorrect date - please check your input", Severity.Error);
            return false;
        }
        else
        {
            transaction.MadeAt = date.Value;
        }
        if (string.IsNullOrEmpty(transaction.Category.Title))
        {
            Snackbar.Add("Incorrect category - please check your input", Severity.Error);
            return false;
        }
        else
        {
            if (!Categories.Any())
                Categories = await CategoryRepository.GetCategories();
            Category tcat = Categories.Single(c => c.Title == transaction.Category.Title);
            if(tcat == null)
            {
                Snackbar.Add("ERROR - tcat is null!");
            }
            else
            {
                transaction.Category = tcat; 
            }
        }
        if(string.IsNullOrEmpty(subcategory)){
            transaction.Subcategory = null;
        }
        else
        {
            if (!SubCategories.Any())
                SubCategories = await CategoryRepository.GetSubCategories();
            Subcategory? tsubcat = SubCategories.SingleOrDefault(c => c.Title == subcategory);
            if(tsubcat == null)
            {
                transaction.Subcategory = new Subcategory
                    {
                        Id = 0,
                        Description = " ",
                        ParentCategoryId = 0,
                        Title = " ",
                    };
            }
        }
        if(transaction.Id == 0)
        {
            Snackbar.Add("Transaction Id: 0 - Error!", Severity.Error);
            return false;
        }
        if(transaction.UserId == 0)
        {
            Snackbar.Add("Transaction UserId: 0 - Error!", Severity.Error);
            return false;
        }
        if(transaction.Value == 0)
        {
            Snackbar.Add("Transaction value: 0 - Error!", Severity.Error);
            return false;
        }
        if(string.IsNullOrEmpty(transaction.Type))
        {
            Snackbar.Add("Transaction Type is null!", Severity.Error);
            return false;
        }
        if (string.IsNullOrEmpty(transaction.Source))
        {
            Snackbar.Add("Transaction Source is empty or null!", Severity.Error);
            transaction.Source = "";
            return false;
        }
        if (string.IsNullOrEmpty(transaction.Description))
        {
            transaction.Description = "";
        }
        return true;
    }
}


