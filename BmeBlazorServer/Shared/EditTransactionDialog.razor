@using MudBlazor
@using BmeModels
@using BmeBlazorServer.Services
@using BmeBlazorServer.Repositories
@using System.ComponentModel.DataAnnotations
@inject ICategoryRepository CategoryRepository
@inject ITransactionRepository TransactionRepository
@inject ISnackbar Snackbar

<EditForm Model="transaction" >
<DataAnnotationsValidator/>
<MudDialog Class="rounded-xl">
    <DialogContent>
        <MudText Typo="Typo.h4" Class="mx-3 mb-6 mt-4" Color="Color.Primary">Edit transaction</MudText>
        <MudTextField 
            @bind-Value="transaction.Source"
            For="@(() => transaction.Source)"
            Label="Debitor/Source" 
            HelperText="E.g: Microsoft"  
            Class="pa-3" 
            Variant="@incomeFieldVariant"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Business"/>


        <MudAutocomplete 
            @bind-Value="transaction.Type"
            T="string" 
            Label="Type"
            Class="pa-3"
            Clearable="true"
            Variant="@incomeFieldVariant"
            MaxItems="2"
            SearchFunc="@TypeSearch"
            ResetValueOnEmptyText="true" >
        </MudAutocomplete>

        <MudTextField 
            @bind-Value="transaction.Value"
            For="@(() => transaction.Value)"
            Label="Value" 
            HelperText="E.g: 4000" 
            Class="pa-3" 
            Variant="@incomeFieldVariant" 
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.AttachMoney" />

        <MudDatePicker 
            @bind-Date="@date"
            Label="Date"
            Class="pa-3"
            ShowWeekNumbers="true"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End"
            Variant="@incomeFieldVariant">
        </MudDatePicker>
                   
        <MudAutocomplete 
            @bind-Value="transaction.Category.Title"
            T="string" 
            Label="Category"
            Class="pa-3"
            Clearable="true"
            Variant="@incomeFieldVariant"
            MaxItems="15"
            SearchFunc="@Search1"
            ResetValueOnEmptyText="true" >
        </MudAutocomplete>
                        
        <MudAutocomplete 
            T="string" 
            Label="Subcategory"
            Class="pa-3"
            Clearable="true"
            Variant="@incomeFieldVariant"
            MaxItems="15"
            @bind-Value="@transaction.Subcategory.Title" 
            SearchFunc="@Search2"
            ResetValueOnEmptyText="true" >
        </MudAutocomplete>

        <MudTextField 
            @bind-Value="transaction.Description"
            For="@(() => transaction.Description)"
            Label="Description" 
            HelperText="E.g: Sold my car"  
            Class="pa-3" 
            Variant="@incomeFieldVariant"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.TextSnippet" >
        </MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Class="mx-auto mb-4" OnClick="Cancel">Cancel</MudButton>
        <MudButton Class="mx-auto mb-4" 
            Color="Color.Error" 
            Variant="Variant.Filled"
            OnClick="OnDelete"
        >Delete</MudButton>
        <MudButton Class="mx-auto mb-4" 
            Color="Color.Primary" 
            Variant="Variant.Filled"
            OnClick="OnEdit"
        >Edit</MudButton>
    </DialogActions>
</MudDialog>
</EditForm>               

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Transaction transaction { get; set; } = new Transaction();

    void Cancel() => MudDialog.Cancel();
    private Variant incomeFieldVariant = Variant.Filled;
    private DateTime? date { get; set; } 
    private string value1 = string.Empty;
    private string value2 = string.Empty;
    private List<Category> Categories = new();
    private List<Subcategory> SubCategories = new();
    private List<string> categories = new();
    private List<string> subCategories = new();
    private List<string> types = new();

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // fetch categories from API
        if (!Categories.Any())
        {
            Categories = await CategoryRepository.GetCategories();
            foreach(Category c in Categories)
            {   
                // Only take income part of categories
                if(c.Id<=14)
                    categories.Add(c.Title);
            }
            types.Add("Income"); types.Add("Income");
            value1 = transaction.Category.Title;
        }

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return categories;
        }
        return categories.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // fetch subCategories from API
        if (!SubCategories.Any())
        {
            SubCategories = await CategoryRepository.GetSubCategories();
            value2 = transaction.Subcategory.Title;
        }
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return subCategories;
        return subCategories.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
     private async Task<IEnumerable<string>> TypeSearch(string value)
    {   
        if (string.IsNullOrEmpty(value))
            return types;
        return types.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnEdit()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.VisibleStateDuration = 3000;
        bool inputOk = ValidateInput();
        if (inputOk)
        {
            var response = await TransactionRepository.UpdateTransaction(transaction);
            if (response.Status)
            {
                Snackbar.Add("Income edit successful!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));

            }
            else
            {
                Snackbar.Add("Error! Changes were not saved.", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        else
        {
            Snackbar.Add("Error! Changes were not saved.", Severity.Error);
            return;
        }
    }

    private async Task OnDelete()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.VisibleStateDuration = 3000;
        bool inputOk = ValidateInput();
        if (inputOk)
        {
            var response = await TransactionRepository.DeleteTransaction(transaction.Id);
            if (response.Status)
            {
                Snackbar.Add("Delete successful!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Error! Changes were not saved.", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        else
        {
            Snackbar.Add("Error! Changes were not saved.", Severity.Error);
            MudDialog.Close(DialogResult.Cancel());
        }
    }

    private bool ValidateInput()
    {
        if (!date.HasValue)
        {
            Snackbar.Add("Incorrect date - please check your input", Severity.Error);
            return false;
        }
        else
        {
            //transaction.MadeAt = DateOnly.FromDateTime(date.Value).ToString();
        }
        if (string.IsNullOrEmpty(value1))
        {
            Snackbar.Add("Incorrect category - please check your input", Severity.Error);
            return false;
        }
        else
        {
            //transaction.CategoryId = Categories.Find(c => c.Title == value1).Id;
        }
        if(string.IsNullOrEmpty(value2)){
            //transaction.SubcategoryId = 0;
        }
        else
        {
            //transaction.SubcategoryId = SubCategories.Find(sc => sc.Title == value2).Id;
        }
        return true;
    }
}


