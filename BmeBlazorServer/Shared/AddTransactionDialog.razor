@using MudBlazor
@using BmeModels
@using BmeBlazorServer.Services
@using BmeBlazorServer.Repositories
@using System.ComponentModel.DataAnnotations
@inject ICategoryRepository CategoryRepository
@inject ITransactionRepository TransactionRepository
@inject ISnackbar Snackbar

<EditForm Model="transaction">
<DataAnnotationsValidator/>
<MudDialog Class="rounded-xl">
    <DialogContent>
        <MudText Typo="Typo.h4" Class="mx-3 mb-6 mt-4" Color="Color.Primary">Add transaction</MudText>
        <MudTextField 
            @bind-Value="transaction.Source"
            For="@(() => transaction.Source)"
            Label="Debitor/Source" 
            HelperText="E.g: Microsoft"  
            Class="pa-3" 
            Variant="@FieldVariant"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.Business"/>

        <MudTextField
            @bind-Value="transaction.Type"
            For="@(() => transaction.Type)"
            ReadOnly="true"
            Label="Type"
            Variant="@FieldVariant" 
            Class="pa-3"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.AccountBalance" 
            AdornmentColor="Color.Primary" />

        <MudTextField 
            @bind-Value="transaction.Value"
            For="@(() => transaction.Value)"
            Label="Value" 
            HelperText="E.g: 4000" 
            Class="pa-3" 
            Variant="@FieldVariant" 
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.AttachMoney" />

        <MudDatePicker 
            @bind-Date="@date"
            Label="Date"
            Class="pa-3"
            ShowWeekNumbers="true"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End"
            Variant="@FieldVariant">
        </MudDatePicker>
                   
        <MudAutocomplete 
            @bind-Value="@value1"
            T="string" 
            Label="Category"
            Class="pa-3"
            Clearable="true"
            Variant="@FieldVariant"
            MaxItems="15"
            SearchFunc="@Search1"
            ResetValueOnEmptyText="true" >
        </MudAutocomplete>
                        
        <MudAutocomplete 
            @bind-Value="@value2" 
            T="string" 
            Label="Subcategory"
            Class="pa-3"
            Clearable="true"
            Variant="@FieldVariant"
            MaxItems="15"
            SearchFunc="@Search2"
            ResetValueOnEmptyText="true" >
        </MudAutocomplete>

        <MudTextField 
            @bind-Value="transaction.Description"
            For="@(() => transaction.Description)"
            Label="Description" 
            HelperText="E.g: Sold my car"  
            Class="pa-3" 
            Variant="@FieldVariant"
            AdornmentColor="Color.Primary"
            Adornment="Adornment.End" 
            AdornmentIcon="@Icons.Material.Filled.TextSnippet" >
        </MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton Class="mx-auto mb-4" OnClick="Cancel">Cancel</MudButton>
        <MudButton Class="mx-auto mb-4" ButtonType="ButtonType.Submit" 
            Color="Color.Primary" 
            Variant="Variant.Filled"
            OnClick="OnValidSubmit"
        >Submit</MudButton>
    </DialogActions>
</MudDialog>
</EditForm>               

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();
    [Parameter] public TransactionDTO transaction { get; set; } = new();


    void Cancel() => MudDialog.Cancel();
    private Variant FieldVariant = Variant.Filled;
    private DateTime? date { get; set; }
    private string value1 = string.Empty;
    private string value2 = string.Empty;
    private List<Category> Categories = new();
    private List<Subcategory> SubCategories = new();
    private List<string> categories = new();
    private List<string> subCategories = new();

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // fetch categories from API
        if (!Categories.Any())
        {
            Categories = await CategoryRepository.GetCategories();
            foreach(Category c in Categories)
            {   
                if(transaction.Type == "Income")
                {
                    // Income part of categories
                    if(c.Id<=14)
                    {
                        categories.Add(c.Title);
                    }
                }
                if(transaction.Type == "Expense")
                {
                    // Expense part of categories
                    if(c.Id>=14)
                    {
                        categories.Add(c.Title);
                    }
                }
            }
        }

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return categories;
        }
        return categories.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // fetch subCategories from API
        if (!SubCategories.Any())
        {
            SubCategories = await CategoryRepository.GetSubCategories();
        }
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return subCategories;
        return subCategories.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnValidSubmit()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.VisibleStateDuration = 3000;
        bool validated = validateInput();
        if (validated)
        {
            var response = await TransactionRepository.CreateTransaction(transaction);
            if (response.Status)
            {
                Snackbar.Add("Transaction submitted!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        else
        {
            Snackbar.Add("Error! Creating transaction "+ transaction.Source + " failed", Severity.Error);
            //MudDialog.Close(DialogResult.Cancel());
        }
    }

    private bool validateInput()
    {
        if (!date.HasValue || date.Value >= DateTime.Now)
        {
            Snackbar.Add("Incorrect date - please check your input", Severity.Error);
            return false;
        }
        else
        {
            transaction.MadeAt = date.Value;
        }
        if (string.IsNullOrEmpty(value1))
        {
            Snackbar.Add("Incorrect category - please check your input", Severity.Error);
            return false;
        }
        else
        {
            transaction.CategoryId = Categories.Single(c => c.Title == value1).Id;
        }
        if(string.IsNullOrEmpty(value2)){
            transaction.SubcategoryId = null;
        }
        else
        {
            transaction.SubcategoryId = SubCategories.Single(c => c.Title == value2).Id;
        }
        if (transaction.Type == "Expense")
        {
            if (transaction.Value > 0)
                transaction.Value = transaction.Value * (-1);
        }
        return true;
    }
}


