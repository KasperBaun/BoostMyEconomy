@using MudBlazor
@using System
@using BmeModels
@using BmeBlazorServer.Services
@inject ICategoryService CategoryService
@inject ITransactionService TransactionService
@using System.ComponentModel.DataAnnotations

<EditForm Model="@model" OnValidSubmit="OnValidSubmit" style="border-radius:24px;">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Style="border-radius: 24px;" Width="700px;" Height="700px;">
            <MudCard>
                <MudCardContent Style="rounded-xl">
                    <MudTextField Label="Source"
                                    @bind-Value="model.Source" For="@(() => model.Source)"/>
                    <MudTextField Label="Value" Class="mt-3"
                                    @bind-Value="model.Value" For="@(() => model.Value)" InputType="InputType.Number"/>
                    <MudTextField Label="Transaction date"  Class="mt-3"
                                    @bind-Value="model.MadeAt" For="@(() => model.MadeAt)" InputType="InputType.Date"/>
                    <MudTextField Label="Category" Class="mt-3"
                                    @bind-Value="model.CategoryId" For="@(() => model.CategoryId)" InputType="InputType.Number"/>
                    <MudTextField Label="Subcategory" Class="mt-3"
                                    @bind-Value="model.SubcategoryId" For="@(() => model.SubcategoryId)"/>
                    <MudTextField Label="Description" Class="mt-3"
                                    @bind-Value="model.Description" For="@(() => model.Description)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudPaper>
    </MudItem>   
</MudGrid>
</EditForm>

@code {
    [Inject] ISnackbar Snackbar { get; set; }
    MudForm form;

    public TransactionDTO model = new TransactionDTO()
    {
        Type="Income"
    };
    bool success;

    private async Task OnValidSubmit()
    {
        //await form.Validate();

        //if (form.IsValid)
        //{
            var response = await TransactionService.CreateTransaction(model);
            if (response.Status)
            {
                Snackbar.Add("Submitted!");
            }
            else
            {
                Snackbar.Add("Error!");
            }
        //}
    }

}