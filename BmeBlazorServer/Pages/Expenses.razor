@page "/expenses"
@using MudBlazor
@using BmeModels
@using BmeBlazorServer.Repositories
@inject IDialogService DialogService
@inject IExpenseService ExpenseService
@inject IUserRepository UserRepository
@inject ITransactionRepository TransactionRepository
@implements IDisposable

<PageTitle>Expenses</PageTitle>

<AuthorizeView>
    <Authorized>
    <!-- Container for the entire dashboard -->
    <MudContainer Class="mt-6 px-8" MaxWidth="MaxWidth.False">
        <MudGrid Spacing="4" Class="mt-6">

             <!-- Title -->
            <MudItem xs="12" sm="6" md="3" >
                <MudText Typo="Typo.h2" Class="ma-auto" Color="Color.Primary">Expenses</MudText>
            </MudItem>
            <!-- Datepicker -->
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="25" Class="rounded-xl">
                    <MudToolBar>
                        <MudDateRangePicker 
                            Class="ma-auto" 
                            @bind-DateRange="ExpenseService.PeriodSelected"
                            PickerClosed="ExpenseService.PeriodChanged"
                            Color="Color.Primary" 
                            AdornmentColor="Color.Primary" 
                            IconSize="Size.Medium" 
                            />
                    </MudToolBar>
                </MudPaper>
            </MudItem>
             <!-- Search -->
            <MudItem xs="12" sm="6" md="3" >
                <MudPaper Elevation="25" Class="rounded-xl">
                    <MudToolBar>
                        <MudTextField 
                            Class="ma-auto" 
                            @bind-Value="searchString1" 
                            Placeholder="Search" 
                            Adornment="Adornment.End" 
                            AdornmentIcon="@Icons.Material.Filled.Search" 
                            AdornmentColor="Color.Primary" 
                            IconSize="Size.Medium"></MudTextField>
                    </MudToolBar>
                </MudPaper>
            </MudItem>
             <!-- Add transaction -->
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="25" Class="rounded-xl">
                    <MudToolBar Class="px-0">
                    <MudButton Variant="Variant.Filled" 
                        Class="rounded-xl mud-height-full mud-button-full-width" 
                        StartIcon="@Icons.Material.Outlined.Add" 
                        OnClick="OpenAddTransactionDialog"
                        Color="Color.Primary">
                        Add expense
                    </MudButton>
                    </MudToolBar>
                </MudPaper>
            </MudItem>

            <!-- Expense table -->
            <MudItem xs="12" sm="12" md="9">
                <MudGrid>
                    <MudItem xs="12" sm="12" md="12">
                            <MudTable
                                @ref="expenseTable"
                                T="Transaction"
                                RowClassFunc="@SelectedRowClassFunc"
                                OnRowClick="OpenEditTransactionDialog"
                                Height="360px"
                                Items="ExpenseService.ExpensesForPeriod" 
                                Elevation="25"
                                Class="rounded-xl"
                                Style="margin:auto; overflow-y:hidden" 
                                Dense="@dense" 
                                Hover="true" 
                                Bordered="false"
                                Loading="@loading"
                                Striped="@striped"
                                Filter="new Func<Transaction,bool>(FilterFunc1)" 
                                @bind-SelectedItem="@selectedTransaction"
                                >
                            <HeaderContent>
                                <!--<MudTh>Icon</MudTh>-->
                                <MudTh>Date</MudTh>
                                <MudTh>Source</MudTh>
                                <MudTh>Value</MudTh>
                                <MudTh>Category</MudTh>
                                <MudTh>Comment</MudTh>
                            </HeaderContent>

                            <RowTemplate
                                Context="ExpenseTable"
                            >
                                <!--<MudTd DataLabel="Icon"><MudIcon Icon="@Icons.Material.Filled.House"></MudIcon></MudTd>-->
                                <MudTd DataLabel="Date">@DateOnly.FromDateTime(ExpenseTable.MadeAt)</MudTd>
                                <MudTd DataLabel="Source">@ExpenseTable.Source</MudTd>
                                <MudTd DataLabel="Value">@ExpenseTable.Value</MudTd>
                                <MudTd>@ExpenseTable.Category.Title</MudTd>
                                <MudTd>@ExpenseTable.Description</MudTd>
                            </RowTemplate>

                            <PagerContent >
                                <MudSwitch @bind-Checked="@dense" Color="Color.Primary" Class="ml-1">Fold/unfold</MudSwitch>
                                <MudSwitch @bind-Checked="@striped" Color="Color.Primary" Class="ml-1">Striped</MudSwitch>
                                <MudTablePager />
                            </PagerContent>

                        </MudTable>
                    </MudItem>
                    <!-- History -->
                    <MudItem xs="12" sm="12" md="6">
                        <MudPaper Elevation="2" Class="rounded-xl pa-3" Style="height: 330px;">
                            <MudText Typo="Typo.h5">History</MudText>
                            <MudChart 
                                ChartType="ChartType.Line" 
                                ChartSeries="ExpenseService.ExpenseHistory" 
                                ChartOptions="@expenseHistoryOptions"
                                XAxisLabels="ExpenseService.ExpenseHistoryLabels"
                                Width="100%"
                                Height="285px"

                                Class="ma-auto">

                            </MudChart>
                        </MudPaper>
                    </MudItem>

                    <!--Expenses breakdown-->
                    <MudItem xs="12" sm="12" md="6">
                        <MudPaper Elevation="2" Class="rounded-xl" Style="height: 330px;">
                            <MudText Typo="Typo.h5" Class="pa-3" >Expenses breakdown by source</MudText>
                            <MudChart 
                                ChartType="ChartType.Pie" 
                                LegendPosition="Position.Right" 
                                Width="250px" Height="250px"
                                InputData="ExpenseService.ExpenseSourcesForPeriod.Data" 
                                InputLabels="ExpenseService.ExpenseSourcesForPeriod.Labels"
                            >
                            </MudChart>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <!-- Top fixed expenses by category -->
            <MudItem xs="12" sm="12" md="3">
                <MudItem>
                <MudPaper Elevation="2" Class="rounded-xl" Style="height:390px">
                    <MudText Typo="Typo.h5" Class="pa-3" >Top-5 variable expenses by category</MudText>
                    <MudTable
                                T="TableItem"
                                OnRowClick="OnVariableExpenseClick"
                                Height="334px"
                                Items="ExpenseService.VarExpenseTableItems.Take(5)" 
                                Elevation="25"
                                Class="rounded-xl"
                                Style="margin:auto; overflow-y:hidden" 
                                Dense="false" 
                                Hover="true" 
                                Bordered="false"
                                Outlined="false"
                                Striped="false"
                                Loading="@loading"
                                LoadingProgressColor="Color.Primary"
                                @bind-SelectedItem="@selectedTableItem"
                                >
                                <!--Filter="new Func<Transaction,bool>(FilterFunc1)" -->
                            <!--<HeaderContent>
                                <MudTh>Icon</MudTh>
                                <MudTh>Date</MudTh>
                                <MudTh>Source</MudTh>
                                <MudTh>Value</MudTh>
                            </HeaderContent>-->

                            <RowTemplate
                                Context="VarExpenseTable"
                            >
                                <MudTd Style="border-collapse:collapse"><MudIcon Icon="@VarExpenseTable.IconString" Color="Color.Primary" Size="Size.Medium"/></MudTd>
                                <MudTd DataLabel="Name" Class="typography-h6">@VarExpenseTable.Name</MudTd>
                                <MudTd DataLabel="Value">@VarExpenseTable.Value</MudTd>
                            </RowTemplate>
                        </MudTable>
                </MudPaper>
                </MudItem>
                <MudItem Class="mt-6">
                  <MudPaper Elevation="2" Class="rounded-xl" Style="height:390px">
                    <MudText Typo="Typo.h5" Class="pa-3" >Top-5 fixed expenses by category</MudText>
                     <MudTable
                                T="TableItem"
                                OnRowClick="OnFixedExpenseClick"
                                Height="334px"
                                Items="ExpenseService.FixedExpenseTableItems.Take(5)" 
                                Elevation="25"
                                Class="rounded-xl"
                                Style="margin:auto; overflow-y:hidden" 
                                Dense="false" 
                                Hover="true" 
                                Bordered="false"
                                Outlined="false"
                                Striped="false"
                                Loading="@loading"
                                LoadingProgressColor="Color.Primary"
                                @bind-SelectedItem="@selectedTableItem"
                                >
                                <!--Filter="new Func<Transaction,bool>(FilterFunc1)" -->
                            <!--<HeaderContent>
                                <MudTh>Icon</MudTh>
                                <MudTh>Date</MudTh>
                                <MudTh>Source</MudTh>
                                <MudTh>Value</MudTh>
                            </HeaderContent>-->

                            <RowTemplate
                                Context="FixedExpenseTable"
                            >
                                <MudTd Style="border-collapse:collapse"><MudIcon Icon="@FixedExpenseTable.IconString" Color="Color.Primary" Size="Size.Medium"/></MudTd>
                                <MudTd DataLabel="Name" Class="typography-h6">@FixedExpenseTable.Name</MudTd>
                                <MudTd DataLabel="Value">@FixedExpenseTable.Value</MudTd>
                            </RowTemplate>
                        </MudTable>
                </MudPaper>
                </MudItem>
            </MudItem>
         
        </MudGrid>
    </MudContainer>
   </Authorized>
    <NotAuthorized>
        <img width="600" class="center" src="https://i.kym-cdn.com/entries/icons/original/000/002/144/You_Shall_Not_Pass!_0-1_screenshot.jpg" />
        <Login/>
    </NotAuthorized>
</AuthorizeView>


@code {
    User currentUser = new();
    private bool loading = true;
    /* Instantiate service and manipulate data */
    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await UserRepository.GetCurrentUser();
            /* Subscripe to changes @ UserRepository and ExpenseService */
            UserRepository.OnChange += StateHasChanged;
            ExpenseService.OnChange += StateHasChanged;
            TransactionRepository.OnChange += StateHasChanged;
            bool dataReady = await ExpenseService.InitializeService();
            if (dataReady)
            {
                loading = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public void Dispose()
    {
        ExpenseService.OnChange -= StateHasChanged;
        UserRepository.OnChange -= StateHasChanged;
        TransactionRepository.OnChange -= StateHasChanged;
    }
    /* Add expense */
    async Task OpenAddTransactionDialog()
    {
        TransactionDTO transactionDTO = new() { Type = "Expense" };
        var transactionParameter = new DialogParameters { ["transaction"]=transactionDTO };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, NoHeader=true, CloseButton=true, FullWidth=true,  CloseOnEscapeKey = true };
        var dialog = DialogService.Show<AddTransactionDialog>("", transactionParameter, options);
        var result = await dialog.Result;
        ExpenseService.PeriodChanged();
        StateHasChanged();
    }

    /* Expense table */
    private MudTable<Transaction> expenseTable;
    private int selectedRowNumber = -1;
    private bool dense = false;
    private bool striped = false;
    private string searchString1 = "";
    [Parameter]
    public Transaction selectedTransaction { get; set; } = new();
    private HashSet<Transaction> selectedItems = new HashSet<Transaction>();
    public bool FilterFunc1(Transaction transaction) => FilterFunc(transaction, searchString1);
    public bool FilterFunc(Transaction transaction, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (transaction.Type.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (transaction.Source != null)
        {
            if (transaction.Source.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (transaction.Value.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{transaction.Description} {transaction.Category.Title} {transaction.MadeAt}".Contains(searchString))
            return true;
        return false;
    }

    private string SelectedRowClassFunc(Transaction transaction, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (expenseTable.SelectedItem != null && expenseTable.SelectedItem.Equals(transaction))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
    /* Edit/delete expense */
    async Task OpenEditTransactionDialog()
    {
        var transactionParameter = new DialogParameters { 
            ["transaction"]=selectedTransaction, 
            ["date"]=selectedTransaction.MadeAt,
            ["category"]=selectedTransaction.Category.Title,
            ["subcategory"]=selectedTransaction.Subcategory.Title
        };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, NoHeader=true, CloseButton=true, FullWidth=true,  CloseOnEscapeKey = true };
        var dialog = DialogService.Show<EditTransactionDialog>("",transactionParameter, options);
        var result = await dialog.Result;
        ExpenseService.PeriodChanged();
        StateHasChanged();
    }

    /* History */
    private ChartOptions expenseHistoryOptions = new ChartOptions()
        {
            DisableLegend = true,
            LineStrokeWidth = 5,
            InterpolationOption = InterpolationOption.Straight,
            YAxisFormat = "c",
            YAxisLines = false,
            MaxNumYAxisTicks = 5,
            XAxisLines = true
    };
    /* Top-5 expenses */
    public TableItem selectedTableItem { get; set; } = new();
    async Task OnVariableExpenseClick()
    {
        
    }
    async Task OnFixedExpenseClick()
    {
        
    }
}
