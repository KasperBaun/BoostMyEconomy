@page "/overview"
@using BmeModels;
@using BmeBlazorServer.Services
@inject ISnackbar Snackbar
@inject IUserService UserService
@inject AuthenticationStateProvider AuthStateProvider
@inject IOverviewService OverviewService
@implements IDisposable

<PageTitle>Overview</PageTitle>

<AuthorizeView>
    <Authorized>
        <!-- Container for the entire dashboard -->
        <MudContainer Class="mt-6 px-8" MaxWidth="MaxWidth.False">
            <MudGrid Spacing="4" Class="mt-6">

                <!-- Title -->
                <MudItem xs="12" sm="6" md="3">
                    <MudText Typo="Typo.h2" Class="ma-auto" Color="Color.Primary">Overview</MudText>
                </MudItem>

                <!-- Datepicker -->
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="25" Class="rounded-xl">
                        <MudToolBar>
                            <MudDatePicker  
                                @bind-Date="OverviewService.YearSelected"
                                OpenTo="OpenTo.Year" 
                                FixMonth="@DateTime.Today.Month" 
                                FixDay="@DateTime.Today.Day" 
                                DateFormat="yyyy"
                                TitleDateFormat="yyyy"
                                Color="Color.Primary" 
                                PickerVariant="PickerVariant.Dialog"
                                PickerClosed="OverviewService.PeriodChanged"
                                AdornmentColor="Color.Primary" 
                                IconSize="Size.Medium"
                                />
                        </MudToolBar>
                    </MudPaper>
                </MudItem>

                 <!-- Balance -->
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="25" Class="rounded-xl">
                        <MudToolBar>
                            <MudText Style="margin-right:10px">Balance</MudText>
                            <MudProgressLinear Color="Color.Primary" Size="Size.Large" Value="OverviewService.Balance" />
                        </MudToolBar>
                    </MudPaper>
                </MudItem>

                 <!-- Toolbar -->
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="25" Class="rounded-xl">
                        <MudToolBar>
                            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" Color="Color.Inherit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.PushPin" Color="Color.Inherit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.PeopleAlt" Color="Color.Inherit" OnClick = "OverviewService.InitializeOverviewService"/>
                            <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" OnClick="StateHasChanged"  />
                        </MudToolBar>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" sm="12" md="9">
                    <MudGrid>
                         <!-- Notifications -->
                        <MudItem xs="12" sm="12" md="12">
                            <MudPaper Elevation="25" Class="rounded-xl pa-3" Style="height: 100px;">
                                <MudGrid>
                                    <MudItem xs="12" sm="12" md="4">
                                        <MudText Typo="Typo.h5">Notifications</MudText>
                                        <MudText Typo="Typo.body1">Welcome @UserService.UserName !</MudText>
                                        <MudText Typo="Typo.body1">Last time you logged on was 17th feb. 15:36</MudText>
                                    </MudItem>
                                    <MudItem xs="12" sm="12" md="4">
                                        Test
                                    </MudItem>
                                    <MudItem xs="12" sm="12" md="4">
                                        Virker det
                                    </MudItem>

                                </MudGrid>
                            </MudPaper>
                        </MudItem>

                        <!--Income & total expenses-->
                       <MudItem xs="12" sm="12" md="6" >
                            <MudPaper Elevation="25" Class="rounded-xl pa-3" Style="height: 400px;">
                                <MudText Typo="Typo.h5">Income & total expenses</MudText>
                                <MudChart 
                                    ChartType="ChartType.Line" 
                                    ChartSeries="OverviewService.IncomeAndExpense" 
                                    XAxisLabels="@IncomeExpenseLabels" 
                                    Width="100%" 
                                    Height="330px" 
                                    ChartOptions="IncomeExpensesOptions"
                                />
                            </MudPaper>
                        </MudItem>

                        

                        <!--Expenses breakdown-->
                        <MudItem xs="12" sm="12" md="6">
                            <MudPaper Elevation="25" Class=" rounded-xl pa-3" Style="height: 400px;">
                                <MudText Typo="Typo.h5">Expenses breakdown</MudText>
                                <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Right" Width="225px" Height="225px"
                                    InputData="@data" InputLabels="@labels">
                                </MudChart>
                            </MudPaper>
                        </MudItem>

                        <!--Result-->
                        <MudItem xs="12" sm="12" md="12" >
                            <MudPaper Elevation="25" Class="rounded-xl" Style="height: 250px;" >
                                <MudText Class="pa-3" Typo="Typo.h5">Result</MudText>
                                <!--
                                <MudDataGrid Items="@Results.Take(Results.Count())" Bordered="true" Dense="true" Class="overflow-y-scroll">
                                    <Columns>
                                        <Column T="Result" Field="Position" Title="Nr" />
                                        <Column T="Result" Field="Month" />
                                        <Column T="Result" Field="Value" CellStyleFunc="@_cellStyleFunc"  />
                                    </Columns>
                                </MudDataGrid>
                                -->

                                <MudSimpleTable 
                                    Class="rounded-xl"
                                    Style="overflow-x: auto; height:194px; width:100%;"
                                    Dense = "true"
                                    Hover = "true"
                                    Striped = "true"
                                    Elevation = "25"
                                >
                                   <table class="mud-xl-table mud-table-striped mud-table-hover">
                                    <tr style="background-color:teal">
                                        <th></th>
                                        @foreach (string month in OverviewService.GetMonths.ToArray())
                                        {
                                        <td>@month</td>
                                        }
                                    </tr>
                                    <tr>
                                        <th>
                                            Income
                                        </th>
                                        @foreach (double i in OverviewService.IncomePrMonth.ToArray())
                                        {
                                        <td><div class="mud-typography-body1">@i</div></td>
                                        }
                                    </tr>
                                    <tr style="background-color:teal">
                                        <th>
                                            Expenses
                                        </th>
                                        @foreach (double e in OverviewService.ExpensesPrMonth.ToArray())
                                        {
                                        <td><div class="mud-typography-body1">@e</div></td>
                                        }
                                    </tr>
                                    <tr>
                                        <th>
                                            Result
                                        </th>
                                        @foreach (double r in OverviewService.ResultPrMonth.ToArray())
                                        {
                                            @if (r < 0)
                                            {
                                                <td><div class="mud-typography-body1 red-text">@r</div></td>
                                            }
                                            else
                                            {
                                                <td><div class="mud-typography-body1 green-text">@r</div></td>
                                            }
                                        }
                                    </tr>
                                     <tr style="background-color:teal">
                                        <th>
                                            Result acc
                                        </th>
                                        @foreach (double ra in OverviewService.ResultPrMonthAcc.ToArray())
                                        {
                                            @if (ra < 0)
                                            {
                                                <td><div class="mud-typography-body1 red-text">@ra</div></td>
                                            }
                                            else
                                            {
                                                <td><div class="mud-typography-body1 green-text">@ra</div></td>
                                            }
                                        }
                                    </tr>
                                   
                                   
                                    </table>
                                </MudSimpleTable>
                            </MudPaper>
                        </MudItem>


                    </MudGrid>
                </MudItem>



                <MudItem xs="12" sm="12" md="3">
                    <MudGrid>
                        <!-- User info -->
                        <MudItem xs="12">
                            <MudPaper Elevation="25" Class="rounded-xl pa-3" Style="height: 250px;">
                                <MudText Typo="Typo.h5">User information</MudText>
                            </MudPaper>
                        </MudItem>

                        <!-- Recent transactions -->
                        <MudItem xs="12">
                            <MudPaper Elevation="25" Class="rounded-xl" Style="height: 499px;">
                                <div class="d-flex"><MudText Class="pa-3" Typo="Typo.h5">Recent transactions</MudText>
                                <MudSwitch @bind-Checked="@dense" Color="Color.Primary" Class="ml-1">Fold</MudSwitch>
                                <MudSwitch @bind-Checked="@striped" Color="Color.Primary" Class="ml-1">Striped</MudSwitch>
                                </div>
                                <MudTable 
                                    Items="OverviewService.TransactionsForPeriod.Take(12)"
                                    Height="411px"
                                    Hover="true" 
                                    Dense="@dense"
                                    Class="rounded-xl"
                                    Striped="@striped" 
                                    Elevation="25"
                                    Style="margin:auto; overflow-y:hidden" 
                                    Loading="@LoadingRecentTransactions" 
                                    Breakpoint="Breakpoint.Sm"  
                                    OnRowClick="RowClickEvent" 
                                    T="Transaction">
                                <HeaderContent>
                                    <MudTh>Date</MudTh>
                                    <MudTh>Source</MudTh>
                                    <MudTh>Value</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="recentTransactions">
                                    <MudTd DataLabel="Date">@recentTransactions.MadeAt</MudTd>
                                    <MudTd DataLabel="Name">@recentTransactions.Source</MudTd>
                                    <MudTd DataLabel="Value">@recentTransactions.Value</MudTd>
                                </RowTemplate>
                            </MudTable>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudItem>
         
            </MudGrid>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <img width="600" class="center" src="https://i.kym-cdn.com/entries/icons/original/000/002/144/You_Shall_Not_Pass!_0-1_screenshot.jpg" />
        <Login/>
    </NotAuthorized>
</AuthorizeView>

@code {

     // Style the cells according to a positive or negative result
    private Func<Result, string> _cellStyle => x =>
    {
        string style = "";

        if (x.Value >= 0)
            style += "color:#00FF00";

        else
            style += "color:#FF0000";

        return style;
    };
    /* Date picker*/

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserService.ParseLoggedInUserName();
            OverviewService.OnChange += StateHasChanged;
            bool dataReady = await OverviewService.InitializeOverviewService();
            if (dataReady)
            {
                LoadingRecentTransactions = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    public void Dispose()
    {
        OverviewService.OnChange -= StateHasChanged;
    }

    /* Notifications */

    /* User information */

    /* Income & total expenses */
    public string[] IncomeExpenseLabels = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    private ChartOptions IncomeExpensesOptions = new ChartOptions()
        {
            DisableLegend = true,
            LineStrokeWidth = 3,
            InterpolationOption = InterpolationOption.EndSlope,
            YAxisTicks = 20,
            YAxisLines = false
            //YAxisFormat = "c2"
    };


    /* Result */
    public class Result
    {
        public string Month { get; set; } = String.Empty;
        public int Position { get; set; }
        public int Value { get; set; }

    };

    private IEnumerable<Result> Results = new List<Result>()
    {
        new Result() { Position = 1, Month="Jan", Value = 4500 },
        new Result() { Position = 2, Month="Feb", Value = -3500 },
        new Result() { Position = 3, Month="Mar", Value = 2500 },
        new Result() { Position = 4, Month="Apr", Value = -1500 },
        new Result() { Position = 5, Month="May", Value = -1500 },
        new Result() { Position = 6, Month="Jun", Value = -1500 },
        new Result() { Position = 7, Month="Jul", Value = -1500 },
        new Result() { Position = 8, Month="Aug", Value = -1500 },
        new Result() { Position = 9, Month="Sep", Value = -1500 },
        new Result() { Position = 10, Month="Oct", Value = -1500 },
        new Result() { Position = 11, Month="Nov", Value = -1500 },
        new Result() { Position = 12, Month="Dec", Value = -1500 }
    };

    // Style the cells according to a positive or negative result
    private Func<Result, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (x.Value >= 0)
            style += "color:#00FF00";

        else
            style += "color:#FF0000";

        return style;
    };


    /* Recent transactions */
    private bool LoadingRecentTransactions { get; set; } = true;
    private bool dense = false;
    private bool striped = false;


    private void RowClickEvent(TableRowClickEventArgs<Transaction> tableRowClickEventArgs)
    {
        /* TODO Implement navigation-logic*/
        if (LoadingRecentTransactions)
        {
            LoadingRecentTransactions = false;
        } else
        {
            LoadingRecentTransactions = true;
        }
    }

    /* Categories*/
    public double[] data = { 25, 77, 28, 5 };
    public string[] labels = { "Oil", "Coal", "Gas", "Biomass" };
}
